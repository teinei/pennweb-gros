0
00:00:05,511 --> 00:00:07,577
When I started learning about React,

1
00:00:07,577 --> 00:00:11,071
I thought how do I get one component to access or modify another?

2
00:00:11,071 --> 00:00:14,576
I know how to do that for instance in jQuery, I can get and

3
00:00:14,576 --> 00:00:16,748
HTML element by it's class or ID.

4
00:00:16,748 --> 00:00:21,548
But in React, if I have one component, how can that then go get another component?

5
00:00:21,548 --> 00:00:24,913
The solution is to use composition that we saw last time where one

6
00:00:24,913 --> 00:00:29,342
component contains other components and that's how we'll get them to communicate

7
00:00:29,342 --> 00:00:31,795
with each other as we'll see in this example.

8
00:00:31,795 --> 00:00:36,412
Here I have an HTML page where I'm going to ask a user to enter two numbers and

9
00:00:36,412 --> 00:00:40,608
then we'll multiply them immediately and show the product below.

10
00:00:40,608 --> 00:00:45,598
Initially, the fields default to zero, so when the user types 8, nothing is shown.

11
00:00:45,598 --> 00:00:48,325
But when they type 9 in the other field,

12
00:00:48,325 --> 00:00:51,866
it will automatically multiply them and show 72.

13
00:00:51,866 --> 00:00:56,241
Every time we change what's in the field, they will automatically

14
00:00:56,241 --> 00:01:01,165
update the product below, here it's showing that 8 times 94 is 752.

15
00:01:01,165 --> 00:01:06,791
I can enter another value here, 83 times 94, I can use a floating point,

16
00:01:06,791 --> 00:01:10,700
decimal numbers, I can use negative numbers, etc.

17
00:01:10,700 --> 00:01:14,107
So the question is, how do I accomplish this in React?

18
00:01:14,107 --> 00:01:15,951
Where are the components?

19
00:01:15,951 --> 00:01:19,620
Well, certainly we can make the entire thing one component.

20
00:01:19,620 --> 00:01:23,241
And it's state is the different values and the product, and

21
00:01:23,241 --> 00:01:27,220
it handles all of the rendering, and all of the user interaction.

22
00:01:27,220 --> 00:01:32,108
One problem with that is that we want to re-render only the things that need

23
00:01:32,108 --> 00:01:36,160
to be re-rendered, and not the entire component each time.

24
00:01:36,160 --> 00:01:38,327
In this example, maybe, it doesn't matter.

25
00:01:38,327 --> 00:01:43,144
But if you think about having lots of different values in the page,

26
00:01:43,144 --> 00:01:46,771
we don't want them all to update at the same time.

27
00:01:46,771 --> 00:01:49,537
Likewise, this component would not be reusable.

28
00:01:49,537 --> 00:01:52,502
The point of React is that we can create reusable,

29
00:01:52,502 --> 00:01:56,040
modular components to use in different web applications.

30
00:01:56,040 --> 00:02:00,424
And here, there's perhaps too much tied to this one specific app.

31
00:02:00,424 --> 00:02:04,366
It's tempting to do what we did last time, which is to have, for

32
00:02:04,366 --> 00:02:08,972
instance, these text fields be components within this outer component.

33
00:02:08,972 --> 00:02:12,900
But when they're modified, how would they notify the parent,

34
00:02:12,900 --> 00:02:16,548
the outer component, that something needs to be changed?

35
00:02:16,548 --> 00:02:19,841
We could just have three separate components, but

36
00:02:19,841 --> 00:02:24,666
we're still on the same problem where we started where if one changes, for

37
00:02:24,666 --> 00:02:29,510
instance the input box changes, how does it notify this other component?

38
00:02:29,510 --> 00:02:33,934
So this solution that I hinted at, at the beginning of the lesson,

39
00:02:33,934 --> 00:02:38,441
is to keep using composition where one component contains others.

40
00:02:38,441 --> 00:02:43,303
Here, the entire application is one component that's

41
00:02:43,303 --> 00:02:47,549
demonstrated with the red outer box shown here.

42
00:02:47,549 --> 00:02:52,125
But that outer component will contain three inner components.

43
00:02:52,125 --> 00:02:57,385
There are the two input boxes, shown in green here.

44
00:02:57,385 --> 00:03:01,876
And then, shown here in blue, is the output or the product,

45
00:03:01,876 --> 00:03:05,237
which is itself, another React component.

46
00:03:05,237 --> 00:03:09,252
So it's a lot to keep track of, but it's actually a fairly graceful solution.

47
00:03:09,252 --> 00:03:13,060
We'll start with the outer component which I've called the Multiplier.

48
00:03:13,060 --> 00:03:19,280
The Multiplier has a constructor and a Multiplier has three parts to its state.

49
00:03:19,280 --> 00:03:24,101
The first is the first input value, which will initialize to 0.

50
00:03:24,101 --> 00:03:26,573
The second input value also initialized to 0.

51
00:03:26,573 --> 00:03:29,408
And the product, of course, initialized to 0.

52
00:03:29,408 --> 00:03:32,526
Here we see something we haven't seen in previous examples.

53
00:03:32,526 --> 00:03:37,825
But what I'm doing here is creating a multiply property in this object and

54
00:03:37,825 --> 00:03:41,934
I'm setting it to its own multiply function using bind.

55
00:03:41,934 --> 00:03:48,630
Here I see the definition of my multiply function, which will take two parameters,

56
00:03:48,630 --> 00:03:54,777
the id of the input box that's being changed and the value that is in that box.

57
00:03:54,777 --> 00:03:59,028
If the id is 1, that means that this is input box number 1.

58
00:03:59,028 --> 00:04:03,455
Then the multiplier component, the outer component, will set its state accordingly.

59
00:04:03,455 --> 00:04:09,604
It'll set it's own input1 variable to whatever the value was in that input box

60
00:04:09,604 --> 00:04:16,053
and then update the product by multiplying that value times whatever was input2.

61
00:04:16,053 --> 00:04:20,101
If this was id number 2, it's the second input box that was changed.

62
00:04:20,101 --> 00:04:25,403
Then we'll set the state accordingly by changing input two to that value,

63
00:04:25,403 --> 00:04:29,791
and recalculating the product using whatever was input one.

64
00:04:29,791 --> 00:04:34,889
Now you might ask, why not just set input1 or input2 in the state,

65
00:04:34,889 --> 00:04:40,273
and then calculate the product as always being input1 times input2?

66
00:04:40,273 --> 00:04:45,877
The reason is, if we call set state, and then call set state again, the first

67
00:04:45,877 --> 00:04:51,848
change won't be seen by the second change until after this function is finished.

68
00:04:51,848 --> 00:04:56,824
For that reason we need to have this code that sets the state depending on whether

69
00:04:56,824 --> 00:04:57,800
id was 1 or 2.

70
00:04:57,800 --> 00:05:01,036
Now here's the render function for our multiplier component.

71
00:05:01,036 --> 00:05:07,315
This is going to return a div, and we're going to contain three other components.

72
00:05:07,315 --> 00:05:11,119
The first two are the number input fields that we'll see in the next slide.

73
00:05:11,119 --> 00:05:16,886
Each number input field has an id, and the number input field also has an action.

74
00:05:16,886 --> 00:05:20,561
The action is a property that's passed to the number input field.

75
00:05:20,561 --> 00:05:22,677
But what's different about this?

76
00:05:22,677 --> 00:05:26,375
In past examples, the property has always been some sort of variable.

77
00:05:26,375 --> 00:05:29,519
We initialized the string, we initialized an item, but

78
00:05:29,519 --> 00:05:32,215
here, we're initializing it with a function.

79
00:05:32,215 --> 00:05:36,894
That is we're passing a function from the multiplier, the parent,

80
00:05:36,894 --> 00:05:39,566
to its child, the NumberInputField.

81
00:05:39,566 --> 00:05:42,835
We'll do this for the second input field as well.

82
00:05:42,835 --> 00:05:48,658
Setting its id to 2, and setting the same action, the same multiply function.

83
00:05:48,658 --> 00:05:52,660
And then last, within the multiplier, we have the output field,

84
00:05:52,660 --> 00:05:57,233
where the property of the output field will be the product set to the products

85
00:05:57,233 --> 00:06:00,185
that we've calculated within the multiplier.

86
00:06:00,185 --> 00:06:03,235
Now we'll see the NumberInputField component.

87
00:06:03,235 --> 00:06:08,395
Recall that the NumberInputField was created when we rendered the multiplier.

88
00:06:08,395 --> 00:06:12,653
NumberInputField is a react component, it has a constructor.

89
00:06:12,653 --> 00:06:18,087
And we see again this short hand where we're going to bind the handleChange

90
00:06:18,087 --> 00:06:22,410
function to a handleChange variable that we can later use.

91
00:06:22,410 --> 00:06:24,935
Here is the handleChange function.

92
00:06:24,935 --> 00:06:29,233
It's going to access it's props that were set when this

93
00:06:29,233 --> 00:06:33,629
component was created and invoke this action function.

94
00:06:33,629 --> 00:06:38,752
So action is part of the props and was set when this component

95
00:06:38,752 --> 00:06:44,811
was created to be the multiply function in the multiplier component.

96
00:06:44,811 --> 00:06:46,597
That's how this component,

97
00:06:46,597 --> 00:06:50,313
NumberInputField, can call a function can call a function in

98
00:06:50,313 --> 00:06:54,684
another component because that function was passed to it as a its props.

99
00:06:54,684 --> 00:06:59,142
When it calls that function, it's going to pass its own ID and

100
00:06:59,142 --> 00:07:02,938
its going to pass the value that's in the input box.

101
00:07:02,938 --> 00:07:08,259
Then we have the render function which will render the input box and

102
00:07:08,259 --> 00:07:14,546
then bind the handleChange property of this component to the onChange event.

103
00:07:14,546 --> 00:07:19,318
And remember the handleChange property which was set up here is bound to

104
00:07:19,318 --> 00:07:22,907
this handleChange function which is of course here.

105
00:07:22,907 --> 00:07:26,070
If we look back at the multiplier component,

106
00:07:26,070 --> 00:07:30,900
we can see that when the NumberInputField uses the action property to

107
00:07:30,900 --> 00:07:35,644
call the function in the multiplier, it's going to set the state,

108
00:07:35,644 --> 00:07:40,665
take the value that was in the input box, and recalculate the product.

109
00:07:40,665 --> 00:07:44,227
Because we're calling setState in the multiplier,

110
00:07:44,227 --> 00:07:49,462
this will call its render function which will then rerender the OutputField.

111
00:07:49,462 --> 00:07:53,072
The OutputField is a component created in the multiplier.

112
00:07:53,072 --> 00:07:58,627
In its props we set the product which is the multipliers calculated product.

113
00:07:58,627 --> 00:08:04,497
OutputField is a React component and its render function is going to return

114
00:08:04,497 --> 00:08:10,197
the text that reads the product is with the product that was passed to it.

115
00:08:10,197 --> 00:08:14,579
And to include all of this in our HTML page all we need to do is include

116
00:08:14,579 --> 00:08:18,987
the multiplier component and that will include everything else.

117
00:08:18,987 --> 00:08:20,774
Now we're done with the basics of React.

118
00:08:20,774 --> 00:08:24,986
We've seen how to create a component, and how a component can interact with other

119
00:08:24,986 --> 00:08:28,235
components, and render dynamic HTML, based on their state.

